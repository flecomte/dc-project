openapi: 3.0.1
info:
  version: '0.1'
  title: 'DC Project'
  description: 'A free comunity program for create constitution'

paths:
  /register:
    post:
      summary: Create account
      tags:
        - authentification
      operationId: register
      requestBody:
        $ref: '#/components/requestBodies/RegisterRequest'

      responses:
        200:
          description: User created and JWT returned
          content:
            text/plain:
              example:
                eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJBdXRoZW50aWNhdGlvbiIsImlzcyI6ImRjLXByb2plY3QuZnIiLCJpZCI6ImQ1NDRhNmE4LWJhYjgtNDU2MC05NWIxLThhZjAyMDNkOTEwNCIsImV4cCI6MTU2NzA3Mzc0Mn0.0VTetv8fZFjVgpJ-bwJpidGNHJUOmgj8vuZcZXzwnLa7TtFwcXWvh3bDPYHqB66nmOfXyM57XnHDbmRwtipCag

  /login:
    post:
      summary: sign in
      tags:
        - authentification
      operationId: login
      requestBody:
        $ref: '#/components/requestBodies/LoginRequest'
      responses:
        200:
          description: return JWT
          content:
            text/plain:
              example:
                eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJBdXRoZW50aWNhdGlvbiIsImlzcyI6ImRjLXByb2plY3QuZnIiLCJpZCI6ImQ1NDRhNmE4LWJhYjgtNDU2MC05NWIxLThhZjAyMDNkOTEwNCIsImV4cCI6MTU2NzA3Mzc0Mn0.0VTetv8fZFjVgpJ-bwJpidGNHJUOmgj8vuZcZXzwnLa7TtFwcXWvh3bDPYHqB66nmOfXyM57XnHDbmRwtipCag

  /citizens/{citizen}:
    get:
      security:
        - JWTAuth: []
      summary: Get Citizen
      tags:
        - citizen
      operationId: getCitizen
      parameters:
        - name: citizen
          in: path
          description: ID of citizen
          example: e74be8e4-6823-47c4-bd1b-789725b2fa8e
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: The Citizen object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CitizenResponse'
        404:
          description: Citizen not found
  /citizens:
    get:
      security:
        - JWTAuth: []
      summary: Get all citizens
      tags:
        - citizen
      operationId: getCitizens
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/search'
      responses:
        200:
          description: The Citizen objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CitizenResponse'

  /articles:
    get:
      summary: Get all articles
      tags:
        - article
      operationId: getArticles
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/search'
      responses:
        200:
          description: The Article objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ArticleResponse'
  /articles/{article}:
    get:
      summary: Get all articles
      tags:
        - article
      operationId: getArticles
      parameters:
        - name: article
          in: query
          required: true
          description: the ID of article
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: The Article objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ArticleResponse'

components:
  parameters:
    page:
      name: page
      in: query
      description: The current page
      example: 1
      required: false
      schema:
        default: 1
        type: integer
        minimum: 1
    limit:
      name: limit
      in: query
      description: The number of object per page
      example: 50
      required: false
      schema:
        default: 50
        type: integer
        minimum: 1
        maximum: 50
    sort:
      name: sort
      in: query
      description: The sort field name
      example: first_name
      required: false
      schema:
        type: string
    direction:
      name: direction
      in: query
      description: The sort direction
      example: asc
      required: false
      schema:
        type: string
        default: asc
        enum: [asc, desc]
    search:
      name: search
      in: query
      description: A text to seach
      example: John Doe
      required: false
      schema:
        type: string

  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      description: call /login to get token

  schemas:
    UUID:
      type: string
      pattern: '[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'
      description: UUID
      format: uuid
      example:
        e74be8e4-6823-47c4-bd1b-789725b2fa8e

    UuidEntity:
      properties:
        id:
          $ref: '#/components/schemas/UUID'

    CreatedBy:
      properties:
        created_by:
          $ref: '#/components/schemas/UuidEntity'

    CreatedAt:
      properties:
        created_at:
          type: string
          format: 'date-time'

    UserBase:
      properties:
        username:
          type: string
          required: true
          example:
            john-doe
    UserResponse:
      allOf:
        - $ref: '#/components/schemas/UserBase'
        - $ref: '#/components/schemas/UuidEntity'
    UserRequest:
      allOf:
        - $ref: '#/components/schemas/UserBase'
        - type: object
          properties:
            plain_password:
              type: string
              required: true
              example:
                azerty
              format: password

    CitizenResponse:
      allOf:
        - $ref: '#/components/schemas/CitizenBase'
        - $ref: '#/components/schemas/CreatedAt'
        - $ref: '#/components/schemas/UuidEntity'
        - type: object
          properties:
            user:
              $ref: '#/components/schemas/UserResponse'
    CitizenBase:
      type: object
      properties:
        name:
          type: object
          properties:
            first_name:
              type: string
              required: true
              example:
                john
            last_name:
              type: string
              required: true
              example:
                Doe
        birthday:
          type: string
          example:
            1984-12-25
    CitizenRequest:
      allOf:
        - $ref: '#/components/schemas/CitizenBase'
        - type: object
          properties:
            user:
              $ref: '#/components/schemas/UserRequest'

    RegisterRequest:
      $ref: '#/components/schemas/CitizenRequest'

    LoginRequest:
      properties:
        name:
          type: string
          description: username
          required: true
          example:
            john-doe
        password:
          type: string
          description: Pasword
          required: true
          example:
            azerty

    ArticleBase:
      type: object
      properties:
        title:
          type: string
          required: true
        content:
          type: string
          required: true
        descritption:
          type: string
          required: true
        tags:
          type: array
          items:
            type: string
          required: false
          default: []
        annonymous:
          type: boolean
          required: false
          default: true
    ArticleResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/ArticleBase'
        - $ref: '#/components/schemas/UuidEntity'
        - $ref: '#/components/schemas/CreatedBy'
        - $ref: '#/components/schemas/CreatedAt'
    ArticleRequest:
       $ref: '#/components/schemas/ArticleBase'


  requestBodies:
    RegisterRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RegisterRequest'
      description: Register
      required: true

    LoginRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LoginRequest'
      description: Login
      required: true

# Added by API Auto Mocking Plugin
servers:
  - description: localhost
    url: http://localhost:8080
  - description: production
    url: http://dc-project.fr
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/flecomte/dc-project/0.1